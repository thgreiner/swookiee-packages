#!/bin/bash
# chkconfig: 345 80 10
# description: Starts the swookiee runtime
#
# init script for the swookiee runtime
#

## Read configuration from /etc/default/swookie
CONFIG_FILE=/etc/default/swookiee
test -f $CONFIG_FILE && . $CONFIG_FILE
test ! -f $CONFIG_FILE && echo "Config not found - starting with defaults."

## Check if priority is set, if not, default to 0
if [ -z ${PROCESS_PRIORITY} ]; then PROCESS_PRIORITY=0; fi

##
RUNTIME_LOCATION="/opt/swookiee"

## TODO
## enable debug args configurable via export

COMMAND="java $JVM_OPTS $DROP_IN\
 -Dlogback.configurationFile=$RUNTIME_LOCATION/logback.xml\
 -cp $RUNTIME_LOCATION/runtime/plugins/org.eclipse.equinox.launcher* org.eclipse.equinox.launcher.Main\
 -initialize\
 -noExit\
 -configuration $RUNTIME_LOCATION/runtime/configuration"

# Check the swookiee runtime status
check_status() {
  local s=`ps ax | grep '[o]rg.eclipse.equinox.launcher' | sort -r | awk '{print $1}' | head -n1`
  echo "$s"
}

start() {

  pid=`check_status`

  if [ $pid ] ; then
    echo "swookiee runtime is already started"
    exit 0
  fi

  # does log dir exist?
  LOG_DIR=/opt/swookiee/log
  test ! -e $LOG_DIR && mkdir $LOG_DIR && chown swookiee:swookiee $LOG_DIR

  echo -n "Starting swookiee: "

  nice -n $PROCESS_PRIORITY su --shell=/bin/bash --session-command="$COMMAND" swookiee > /opt/swookiee/startup.log 2>&1 &

  sleep 2s

  pid=`check_status`

  if [ $pid ] ; then
    echo "OK"
  else
    echo "FAILED"
  fi

}

clean_start() {
  COMMAND="$COMMAND\
  -clean"
  start
}

wait_for_swookiee_to_stop() {
  cnt=0
  while [ $cnt -lt 10 ]; do
    pid=`check_status`
    if ! [ $pid ]; then
      break
    fi
    echo "... waiting for swookiee to stop."
    sleep 1s
    cnt=$((cnt + 1))
  done
}

stop() {

  pid=`check_status`

  if ! [ $pid ] ; then
    echo "swookiee is already stopped"
    return 1
  fi

  # Kills the swookiee osgi process
  echo "Stopping swookiee"
  kill -15 $pid
  RES=$?
  if [ $RES -eq 0 ]; then
    wait_for_swookiee_to_stop
  fi

  pid=`check_status`

  if ! [ $pid ] ; then
    echo "swookiee stopped."
    return 0
  fi

  echo "Killing swookiee forcefully."
  kill -9 $pid
}

status() {

  pid=`check_status`
  # If a pid was returned the application is running
  if [ $pid ] ; then
    echo "swookiee is started"
  else
    echo "swookiee is stopped"
  fi

}

case "$1" in
  start)
    start
    ;;
  clean-start)
    clean_start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|clean-start|stop|restart|status}"
    exit 1
esac

exit 0
